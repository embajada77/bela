
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: https://styde.net/creacion-del-middleware-admin-para-proteger-el-area-de-administracion/
jhernandez2464160487
# Crear Middleware 

	php artisan make:middleware Owner

		--> El comando crea el middleware en /srv/http/bela/app/Http/Middleware/Owner.php

	
	Ir a /srv/http/bela/app/Http/Kernel.php

		--> declarar el middleware para poder usarlo como middleware

			protected $routeMiddleware = [
			    ...
			    'owner' => \App\Http\Middleware\Owner::class,
			];

	Cargar automáticamente un archivo de rutas (asi como se carga automaticamente routes/web.php)

		Ir a /srv/http/bela_bkp/app/Providers/RouteServiceProvider.php


		    public function map()
		    {
		        $this->mapApiRoutes();

		        $this->mapWebRoutes();

		        $this->mapOwnerRoutes(); // agregar un nuevo metodo
		    }
		    
		    protected function mapOwnerRoutes()
		    {
		        Route::middleware(['web','auth','owner'])
		            ->namespace($this->namespace)
		            ->prefix('/owner')
		            ->group(base_path('routes/owner.php'));
		    }

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: https://styde.net/separando-la-logica-de-autorizacion-de-nuestras-vistas-y-base-de-datos/

# Crear Service Provider
	
	php artisan make:provider ViewServiceProvider

		--> El comando crea el provider en /srv/http/bela/app/Providers/ViewServiceProvider.php


			public function boot()
			{
			    Blade::if('owner', function () {
			        return optional(auth()->user())->isOwner();
			    });
			}

			permite utilizar las directivas de blade @owner ... @endowner

	ademas debemos registrarlo en 

		--> /srv/http/bela/config/app.php

		--> dentro del array providers:


		    'providers' => [
		    	...
		        App\Providers\ViewServiceProvider::class,
		        ...
		    ],
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Policies & Gates

	
	Definimos una politica en el provider

		--> /srv/http/bela/app/Providers/AuthServiceProvider.php

	    public function boot()
	    {
	        // ...

	        Gate::define('view-post',function( User $user, Post $post) {

	            return $user->owns($post,'user_id') || $user->isAdmin();
	        });
	    }

	Y luego podremos consultar desde cualquier lado por los permisos... 

		a) Consultas iguales para ver si el usuario actual puede ver un post

			if (Gate::allows('view-post',$post)) { ... }
			
			if (auth()->user()->can('view-post',$post)) { ... }
		
			o desde blade

			@can('view',$agenda) ... @endcan

		b) Consultas iguales para ver si el usuario actual no puede ver un post

			if (Gate::denies('view-post',$post)) { ... }
			
			if (auth()->user()->cannot('view-post',$post)) { ... }

	Para crear un nuevo policy

		php artisan make:policy PostPolicy 

		y enlazarlo aun modelo

		php artisan make:policy PostPolicy --model=Post

	Luego en el provider

	    public function boot()
	    {
	        // ...

		    // -------------------------------------------- todas son equivalentes
		    # Paso 1:
		    // Gate::define('view-post',function( User $user, Post $post) {
		    //     return ($user->centro) ? ($user->centro->id == $post->centro->id) : false;
		    // });

		    # Paso 2:
		    // Gate::define('view-post','App\Policies\PostPolicy@view');
		    // Gate::define('create-post','App\Policies\PostPolicy@create');
		    // Gate::define('update-post','App\Policies\PostPolicy@update');
		    // Gate::define('delete-post','App\Policies\PostPolicy@delete');
		    
		    # Paso 3:
		    Gate::resource('post',PostPolicy::class);
		    # Esto cambia el nombre de las reglas a x ej. Gate::allows('post.view',$post)

		    # Paso 4:
		    # Si queremos definir mas reglas que las que vienen por defecto
		    // Gate::resource('post',PostPolicy::class,[
		    //     'nombre_regla' => 'nombre_metodo'
		    //     // 'update' => 'update'
		    // ]);
		    // --------------------------------------------
		}

		# Paso 5: Directamente puedo enlazar un modelo a un policy
		# Lo cual cambia nuevamente la forma de la consulta a 
		    # Esto simplifica el nombre de las reglas a x ej. Gate::allows('view',$post)

		class AuthServiceProvider extends ServiceProvider
		{
		    /**
		     * The policy mappings for the application.
		     *
		     * @var array
		     */
		    protected $policies = [
		        'App\Post' => 'App\Policies\PostPolicy',
		    ];

		    public function boot()
		    {
		    	...
		    }
	    }

	    # Paso 6: Dentro del método authorize de un FormRequest podemos interactuar con el Gate:

		    class UpdatePostRequest extends FormRequest
			{
			    public function authorize()
			    {
			        return Gate::allows('update', $this->post);
			    }
			 
			    //...
			}


		Acciones no enlazadas a modelos

			En la mayoría de los casos, cuando queremos autorizar un recurso, vamos a contar con dicho recurso como una variable/objeto, por ejemplo en Gate::allows('update', $this->post) contamos con un post. 

			¿Pero qué sucede cuando no es así? Si queremos preguntar si un usuario puede crear o listar posts, no vamos a contar con un post específico, en casos como ese podemos pasar el nombre de la clase como segundo argumento: 

				Gate::allows('create', App\Post::class) o Gate::denies('create', App\Post::class).
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::